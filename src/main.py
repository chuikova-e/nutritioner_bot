import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters, CallbackQueryHandler, ConversationHandler
from config import TELEGRAM_TOKEN, LOG_LEVEL
from constants import (
    AWAITING_FEEDBACK, AWAITING_CONTEXT, AWAITING_GOALS, AWAITING_WEIGHT, AWAITING_TARGET_WEIGHT,
    TELEGRAM_FORMATTING, DEFAULT_TIMEZONE
)
from auth import check_user_access
from PIL import Image
import io
import tempfile
import os
from datetime import datetime, timedelta
import asyncio
import pytz
from database import (
    save_gpt_response, save_nutrition_goals, get_nutrition_goals,
    get_daily_calories, get_all_active_users, get_daily_food_records,
    save_weight_goal, get_weight_goal, save_weight_measurement, get_weight_history,
    get_weekly_food_records
)
import re
import platform
from openai_utils import (
    analyze_image_with_gpt, transcribe_audio, analyze_nutrition_vs_goals, 
    analyze_weight_progress, encode_image
)

# Start by configuring logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=getattr(logging, LOG_LEVEL.upper())
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for /start command"""
    user_id = update.effective_user.id
    username = update.effective_user.username
    
    if not check_user_access(user_id, username):
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return ConversationHandler.END
        
    logging.info(f"User {user_id} (@{username}) started the bot")
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π –∏ –∞–Ω–∞–ª–∏–∑–∞ –ø–∏—Ç–∞–Ω–∏—è.\n\n"
        "üì∏ –ö–∞–∫ –Ω–∞—á–∞—Ç—å:\n"
        "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–µ–ª–∏ –ø–∏—Ç–∞–Ω–∏—è —á–µ—Ä–µ–∑ /setgoals\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–ª—é–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n"
        "3. –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö.",
        parse_mode="HTML"
    )
    return ConversationHandler.END

async def process_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for receiving messages with photos, text or voice"""
    user_id = update.effective_user.id
    username = update.effective_user.username
    
    if not check_user_access(user_id, username):
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return ConversationHandler.END
        
    logging.info(f"Received message from user {user_id} (@{username})")
    
    # Initialize user data if not exists
    if 'photos_base64' not in context.user_data:
        context.user_data['photos_base64'] = []
        context.user_data['additional_info'] = []
        context.user_data['has_voice'] = False
    
    # Check if we have photos in media group
    media_group_id = update.message.media_group_id
    
    # If this is part of a media group and we haven't processed it yet
    if media_group_id:
        if context.user_data.get('current_media_group') != media_group_id:
            context.user_data['current_media_group'] = media_group_id
            context.user_data['photos_base64'] = []
            context.user_data['additional_info'] = []
            context.user_data['has_voice'] = False
        
        # If we have a photo, add it to the list
        if update.message.photo:
            try:
                photo = await update.message.photo[-1].get_file()
                with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as temp_file:
                    await photo.download_to_drive(temp_file.name)
                    photo_base64 = encode_image(temp_file.name)
                    context.user_data['photos_base64'].append(photo_base64)
                    os.unlink(temp_file.name)
                
                # If we have collected 5 photos or this is the last photo, process them
                if len(context.user_data['photos_base64']) >= 5:
                    return await process_photos_group(update, context)
                
            except Exception as e:
                logging.error(f"Error processing photo in media group: {str(e)}")
        return
    
    # Process single message
    try:
        # Process voice message if present
        if update.message.voice:
            await update.message.reply_text("üé§ –†–∞—Å–ø–æ–∑–Ω–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
            voice = await update.message.voice.get_file()
            
            with tempfile.NamedTemporaryFile(delete=False, suffix='.ogg') as temp_file:
                await voice.download_to_drive(temp_file.name)
                transcribed_text = await transcribe_audio(temp_file.name)
                os.unlink(temp_file.name)
                
                if transcribed_text:
                    await update.message.reply_text(
                        f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{transcribed_text}",
                        parse_mode="HTML"
                    )
                    context.user_data['additional_info'].append(transcribed_text)
                    context.user_data['has_voice'] = True
                else:
                    await update.message.reply_text(
                        "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
                    )
                    return ConversationHandler.END
        # Process text message
        elif update.message.text or update.message.caption:
            text = update.message.text or update.message.caption
            context.user_data['additional_info'].append(text)
            await update.message.reply_text("‚úÖ –¢–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω")
        # Process photo
        elif update.message.photo:
            await update.message.reply_text("üì∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ...")
            photo = await update.message.photo[-1].get_file()
            with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as temp_file:
                await photo.download_to_drive(temp_file.name)
                photo_base64 = encode_image(temp_file.name)
                context.user_data['photos_base64'].append(photo_base64)
                os.unlink(temp_file.name)
            await update.message.reply_text("‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
        
        # Show current status and confirmation button
        status_message = "üìã –¢–µ–∫—É—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n"
        if context.user_data['photos_base64']:
            status_message += f"üì∏ –§–æ—Ç–æ: {len(context.user_data['photos_base64'])} —à—Ç.\n"
        if context.user_data['additional_info']:
            status_message += f"üìù –¢–µ–∫—Å—Ç: {len(context.user_data['additional_info'])} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        if context.user_data['has_voice']:
            status_message += "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –¥–æ–±–∞–≤–ª–µ–Ω–æ\n"
        
        status_message += "\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–ª–∏ –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑?"
        
        # Create keyboard with buttons
        keyboard = [
            [
                InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data='add_more'),
                InlineKeyboardButton("‚úÖ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data='start_analysis')
            ],
            [
                InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(status_message, reply_markup=reply_markup)
        return AWAITING_FEEDBACK
        
    except Exception as e:
        logging.error(f"Error processing message: {str(e)}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        return ConversationHandler.END

async def process_photos_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Process collected photos from media group"""
    try:
        photos_base64 = context.user_data.get('photos_base64', [])
        additional_info = context.user_data.get('additional_info', "")
    
        
        # Clear media group data
        context.user_data['current_media_group'] = None
        context.user_data['photos_base64'] = []
        context.user_data['additional_info'] = []

        # Get response from GPT
        gpt_response = await analyze_image_with_gpt(photos_base64, additional_info)
        
        # Store GPT response in context for later saving
        context.user_data['current_gpt_response'] = gpt_response

        # Create keyboard with buttons
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –í–µ—Ä–Ω–æ", callback_data='correct'),
                InlineKeyboardButton("‚ùå –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç", callback_data='add_context'),
            ],
            [
                InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # Send response with buttons
        await update.message.reply_text(
            f"{gpt_response}\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–µ—Ä–Ω—ã–π?",
            reply_markup=reply_markup,
            parse_mode="HTML"
        )
        
        return AWAITING_FEEDBACK

    except Exception as e:
        logging.error(f"Error processing photos group: {str(e)}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        return ConversationHandler.END

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for button presses"""
    query = update.callback_query
    user_id = update.effective_user.id
    username = update.effective_user.username
    await query.answer()

    if query.data == 'correct':
        # Save the confirmed response to database
        gpt_response = context.user_data.get('current_gpt_response')
        if gpt_response:
            save_gpt_response(gpt_response, username)
            logging.info(f"Saved confirmed GPT response to database for user @{username}")
        
        await query.edit_message_reply_markup(reply_markup=None)
        await query.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å! üòä")
        return ConversationHandler.END
    
    elif query.data == 'add_context':
        logging.info(f"User {user_id} (@{username}) requested to add more context")
        await query.edit_message_reply_markup(reply_markup=None)
        await query.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª—é–¥–µ "
            "(–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏, –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, —Å–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è)"
        )
        return AWAITING_CONTEXT

    elif query.data == 'cancel':
        logging.info(f"User {user_id} (@{username}) cancelled the operation")
        # Clear all user data
        context.user_data.clear()
        await query.edit_message_reply_markup(reply_markup=None)
        await query.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return ConversationHandler.END
        
    elif query.data == 'add_more':
        await query.edit_message_reply_markup(reply_markup=None)
        await query.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (—Ñ–æ—Ç–æ, —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)"
        )
        return ConversationHandler.END
        
    elif query.data == 'start_analysis':
        await query.edit_message_reply_markup(reply_markup=None)
        await query.message.reply_text("üîÑ –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑...")
        
        # Combine all additional info
        combined_info = "\n".join(context.user_data['additional_info']) if context.user_data['additional_info'] else ""
        
        # Get response from GPT
        gpt_response = await analyze_image_with_gpt(
            context.user_data['photos_base64'],
            combined_info
        )
        
        # Store GPT response in context for later saving
        context.user_data['current_gpt_response'] = gpt_response
        
        # Create keyboard with buttons
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –í–µ—Ä–Ω–æ", callback_data='correct'),
                InlineKeyboardButton("‚ùå –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç", callback_data='add_context'),
            ],
            [
                InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # Send response with buttons
        await query.message.reply_text(
            f"{gpt_response}\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–µ—Ä–Ω—ã–π?",
            reply_markup=reply_markup
        )
        
        return AWAITING_FEEDBACK

async def process_additional_context(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for receiving additional context"""
    user_id = update.effective_user.id
    username = update.effective_user.username
    logging.info(f"Received additional context from user {user_id} (@{username})")
    try:
        new_context = update.message.text
        combined_context = f"{context.user_data['last_additional_info']}. Additional context: {new_context}"
        
        # Get new response from GPT with additional context
        gpt_response = await analyze_image_with_gpt(context.user_data['photos_base64'], combined_context)
        
        # Store new GPT response in context for later saving
        context.user_data['current_gpt_response'] = gpt_response

        # Create keyboard with buttons
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –í–µ—Ä–Ω–æ", callback_data='correct'),
                InlineKeyboardButton("‚ùå –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç", callback_data='add_context'),
            ],
            [
                InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # Send new response with buttons
        await update.message.reply_text(
            f"{gpt_response}\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–µ—Ä–Ω—ã–π?",
            reply_markup=reply_markup
        )
        
        # Update saved context
        context.user_data['last_additional_info'] = combined_context
        
        return AWAITING_FEEDBACK

    except Exception as e:
        logging.error(f"Error processing additional context: {str(e)}")
        await update.message.reply_text(
            "Sorry, there was an error processing your request. "
            "Please try sending the photo again."
        )
        return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Cancel current dialog"""
    await update.message.reply_text(
        "Operation cancelled. Send a new photo for analysis.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

async def goals_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for /goals command"""
    user_id = update.effective_user.id
    username = update.effective_user.username
    
    if not check_user_access(user_id, username):
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return ConversationHandler.END

    # Get current goals if they exist
    current_goals = get_nutrition_goals(username)
    
    if current_goals:
        await update.message.reply_text(
            f"–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ —Ü–µ–ª–∏ –ø–∏—Ç–∞–Ω–∏—è:\n\n{current_goals}\n\n"
            "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /setgoals"
        )
    else:
        await update.message.reply_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ü–µ–ª–∏ –ø–∏—Ç–∞–Ω–∏—è.\n"
            "–ß—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /setgoals"
        )
    return ConversationHandler.END

async def set_goals_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for /setgoals command"""
    user_id = update.effective_user.id
    username = update.effective_user.username
    
    if not check_user_access(user_id, username):
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return ConversationHandler.END
    
    # Get current goals if they exist
    current_goals = get_nutrition_goals(username)
    
    if current_goals:
        await update.message.reply_text(
            f"–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ —Ü–µ–ª–∏ –ø–∏—Ç–∞–Ω–∏—è:\n\n{current_goals}\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ü–µ–ª–∏ –ø–∏—Ç–∞–Ω–∏—è:"
        )
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —Ü–µ–ª–∏ –ø–∏—Ç–∞–Ω–∏—è.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "- –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: 2000 –∫–∫–∞–ª\n"
            "- –ë–µ–ª–∫–∏: 120–≥\n"
            "- –ñ–∏—Ä—ã: 60–≥\n"
            "- –£–≥–ª–µ–≤–æ–¥—ã: 250–≥"
        )
    
    return AWAITING_GOALS

async def process_goals(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for processing new nutrition goals"""
    user_id = update.effective_user.id
    username = update.effective_user.username
    new_goals = update.message.text
    
    if save_nutrition_goals(username, new_goals):
        await update.message.reply_text(
            "–í–∞—à–∏ —Ü–µ–ª–∏ –ø–∏—Ç–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Ö —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /goals"
        )
    else:
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ü–µ–ª–µ–π –ø–∏—Ç–∞–Ω–∏—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    return ConversationHandler.END

async def analyze_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for /analyze command"""
    user_id = update.effective_user.id
    username = update.effective_user.username
    
    if not check_user_access(user_id, username):
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return ConversationHandler.END

    # Get today's data
    food_records = get_daily_food_records(username)
    total_calories = get_daily_calories(username)
    goals = get_nutrition_goals(username)
    
    if not food_records:
        await update.message.reply_text(
            "–ó–∞ —Å–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –ø–∏—Ç–∞–Ω–∏–∏.\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –±–ª—é–¥, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ."
        )
        return ConversationHandler.END
    
    # Prepare base message
    message = f"üìä –ê–Ω–∞–ª–∏–∑ –ø–∏—Ç–∞–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
    message += f"üî¢ –í—Å–µ–≥–æ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {total_calories:.0f} –∫–∫–∞–ª\n"
    
    # Add calorie goal info if available
    daily_goal = None
    if goals:
        matches = re.findall(r'–∫–∞–ª–æ—Ä–∏[–π—è]:\s*(\d+)', goals.lower())
        if matches:
            daily_goal = float(matches[0])
            diff = daily_goal - total_calories
            message += f"üéØ –í–∞—à–∞ —Ü–µ–ª—å: {daily_goal:.0f} –∫–∫–∞–ª\n"
            if diff > 0:
                message += f"‚úÖ –û—Å—Ç–∞–ª–æ—Å—å: {diff:.0f} –∫–∫–∞–ª\n"
            else:
                message += f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ: {abs(diff):.0f} –∫–∫–∞–ª\n"
    
    # Add detailed analysis if goals are set
    if goals:
        await update.message.reply_text("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–µ –ø–∏—Ç–∞–Ω–∏–µ...")
        analysis = await analyze_nutrition_vs_goals(food_records, goals)
        if analysis:
            message += f"\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:\n{analysis}"
    
    await update.message.reply_text(message, parse_mode="HTML")
    return ConversationHandler.END

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for /help command"""
    user_id = update.effective_user.id
    username = update.effective_user.username
    
    if not check_user_access(user_id, username):
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return ConversationHandler.END
        
    await update.message.reply_text(
        "ü§ñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
        "üì∏ –°–ø–æ—Å–æ–±—ã –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n"
        "1. –§–æ—Ç–æ –±–ª—é–¥–∞ - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –∏ —è –æ–ø—Ä–µ–¥–µ–ª—é –∫–∞–ª–æ—Ä–∏–∏\n"
        "2. –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ - –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Ñ–æ—Ç–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º\n"
        "3. –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞\n"
        "4. –ì—Ä—É–ø–ø–∞ —Ñ–æ—Ç–æ - –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ 5 —Ñ–æ—Ç–æ –æ–¥–Ω–æ–≥–æ –±–ª—é–¥–∞\n\n"
        "üìã –ö–æ–º–∞–Ω–¥—ã:\n"
        "/goals - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ —Ü–µ–ª–∏ –ø–∏—Ç–∞–Ω–∏—è\n"
        "/setgoals - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª–∏ –ø–æ –∫–∞–ª–æ—Ä–∏—è–º –∏ –ë–ñ–£\n"
        "/calories - –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/analyze - –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–∏—Ç–∞–Ω–∏—è\n"
        "/weight - –≤–Ω–µ—Å—Ç–∏ —Ç–µ–∫—É—â–∏–π –≤–µ—Å\n"
        "/targetweight - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "üìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
        "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø–∏—Ç–∞–Ω–∏–∏ –≤ –ø–æ–ª–Ω–æ—á—å\n"
        "‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤–µ—Å–∞ –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è–º\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
        "üìù –î–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:\n"
        "‚Ä¢ –î–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏\n"
        "‚Ä¢ –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –≤—Å–µ –±–ª—é–¥–æ —Ü–µ–ª–∏–∫–æ–º\n"
        "‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞—Ö\n"
        "‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–µ–ª–∏ –ø–∏—Ç–∞–Ω–∏—è —á–µ—Ä–µ–∑ /setgoals\n"
        "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –æ—Ç–º–µ—á–∞–π—Ç–µ —Å–≤–æ–π –≤–µ—Å"
    )
    return ConversationHandler.END

async def calories_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for /calories command"""
    user_id = update.effective_user.id
    username = update.effective_user.username
    
    if not check_user_access(user_id, username):
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return ConversationHandler.END

    # Get today's calories
    total_calories = get_daily_calories(username)
    
    # Get user's goals
    goals = get_nutrition_goals(username)
    daily_goal = None
    if goals:
        # Try to extract daily calorie goal
        matches = re.findall(r'–∫–∞–ª–æ—Ä–∏[–π—è]:\s*(\d+)', goals.lower())
        if matches:
            daily_goal = float(matches[0])
    
    # Prepare message
    message = f"–°–µ–≥–æ–¥–Ω—è –≤—ã —É–ø–æ—Ç—Ä–µ–±–∏–ª–∏: {total_calories:.0f} –∫–∫–∞–ª\n"
    if daily_goal:
        remaining = daily_goal - total_calories
        message += f"–í–∞—à–∞ —Ü–µ–ª—å –Ω–∞ –¥–µ–Ω—å: {daily_goal:.0f} –∫–∫–∞–ª\n"
        if remaining > 0:
            message += f"–û—Å—Ç–∞–ª–æ—Å—å: {remaining:.0f} –∫–∫–∞–ª"
        else:
            message += f"–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ: {abs(remaining):.0f} –∫–∫–∞–ª"
    
    await update.message.reply_text(message)
    return ConversationHandler.END

async def send_daily_summary(application: Application):
    """Send daily calorie summary to all users"""
    while True:
        try:
            # Wait until midnight
            now = datetime.now(pytz.timezone(DEFAULT_TIMEZONE))
            tomorrow = now.replace(hour=0, minute=0, second=0, microsecond=0) + timedelta(days=1)
            wait_seconds = (tomorrow - now).total_seconds()
            await asyncio.sleep(wait_seconds)
            
            # Get all active users
            users = get_all_active_users()
            
            for username in users:
                try:
                    # Get yesterday's date
                    yesterday = (now - timedelta(days=1)).date()
                    
                    # Get all food records and total calories
                    food_records = get_daily_food_records(username, yesterday)
                    total_calories = get_daily_calories(username, yesterday)
                    
                    # Get user's goals
                    goals = get_nutrition_goals(username)
                    daily_goal = None
                    if goals:
                        matches = re.findall(r'–∫–∞–ª–æ—Ä–∏[–π—è]:\s*(\d+)', goals.lower())
                        if matches:
                            daily_goal = float(matches[0])
                    
                    # Prepare base message
                    message = f"üìä –ò—Ç–æ–≥–∏ –¥–Ω—è ({yesterday}):\n\n"
                    message += f"üî¢ –í—Å–µ–≥–æ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {total_calories:.0f} –∫–∫–∞–ª\n"
                    if daily_goal:
                        diff = total_calories - daily_goal
                        message += f"üéØ –í–∞—à–∞ —Ü–µ–ª—å: {daily_goal:.0f} –∫–∫–∞–ª\n"
                        if diff > 0:
                            message += f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ: {diff:.0f} –∫–∫–∞–ª\n"
                        else:
                            message += f"‚úÖ –û—Å—Ç–∞–ª–æ—Å—å: {abs(diff):.0f} –∫–∫–∞–ª\n"
                    
                    # Add nutrition analysis if we have both goals and food records
                    if goals and food_records:
                        analysis = await analyze_nutrition_vs_goals(food_records, goals)
                        if analysis:
                            message += f"\nüìã –ê–Ω–∞–ª–∏–∑ –ø–∏—Ç–∞–Ω–∏—è:\n{analysis}"
                    
                    # Send message to user
                    await application.bot.send_message(
                        chat_id=username,
                        text=message,
                        parse_mode="HTML"
                    )
                    
                except Exception as e:
                    logging.error(f"Error sending summary to user {username}: {str(e)}")
            
        except Exception as e:
            logging.error(f"Error in daily summary task: {str(e)}")
            await asyncio.sleep(60)  # Wait a minute before retrying

async def weight_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for /weight command"""
    user_id = update.effective_user.id
    username = update.effective_user.username
    
    if not check_user_access(user_id, username):
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return ConversationHandler.END
    
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70.5)",
        reply_markup=ReplyKeyboardRemove()
    )
    return AWAITING_WEIGHT

async def process_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for processing weight input"""
    user_id = update.effective_user.id
    username = update.effective_user.username
    
    try:
        weight = float(update.message.text.replace(',', '.'))
        if weight < 30 or weight > 300:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (–æ—Ç 30 –¥–æ 300 –∫–≥)"
            )
            return AWAITING_WEIGHT
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70.5)"
        )
        return AWAITING_WEIGHT
    
    # Save weight measurement
    if not save_weight_measurement(username, weight):
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–µ—Å–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return ConversationHandler.END
    
    await update.message.reply_text("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å...")
    
    # Get weekly food records
    start_date = datetime.now(pytz.timezone(DEFAULT_TIMEZONE)).date() - timedelta(days=7)
    food_records = get_weekly_food_records(username, start_date)
    
    # Analyze progress
    if food_records:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        history = get_weight_history(username, limit=2)
        target_weight = get_weight_goal(username)
        nutrition_goals = get_nutrition_goals(username)
        
        analysis = await analyze_weight_progress(
            username, 
            weight, 
            food_records, 
            history, 
            target_weight, 
            nutrition_goals
        )
        if analysis:
            await update.message.reply_text(
                f"üìã –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:\n\n{analysis}",
                parse_mode="HTML"
            )
    
    # Calculate time to target if exists
    target_weight = get_weight_goal(username)
    history = get_weight_history(username, limit=2)
    
    if target_weight and len(history) >= 2:
        weight_diff = history[0][1] - history[1][1]  # Weekly weight change
        if abs(weight_diff) > 0.1:
            weeks_remaining = abs((weight - target_weight) / weight_diff)
            if weeks_remaining > 0:
                await update.message.reply_text(
                    f"–ü—Ä–∏ —Ç–µ–∫—É—â–µ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, —Ü–µ–ª—å –±—É–¥–µ—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ "
                    f"{int(weeks_remaining)} –Ω–µ–¥–µ–ª—å"
                )
    
    return ConversationHandler.END

async def target_weight_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for /targetweight command"""
    user_id = update.effective_user.id
    username = update.effective_user.username
    
    if not check_user_access(user_id, username):
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return ConversationHandler.END
    
    current_target = get_weight_goal(username)
    if current_target:
        await update.message.reply_text(
            f"–í–∞—à —Ç–µ–∫—É—â–∏–π —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å: {current_target} –∫–≥\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 65.5)"
        )
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ü–µ–ª–µ–≤–æ–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 65.5)"
        )
    
    return AWAITING_TARGET_WEIGHT

async def process_target_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for processing target weight input"""
    user_id = update.effective_user.id
    username = update.effective_user.username
    
    try:
        weight = float(update.message.text.replace(',', '.'))
        if weight < 30 or weight > 300:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (–æ—Ç 30 –¥–æ 300 –∫–≥)"
            )
            return AWAITING_TARGET_WEIGHT
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 65.5)"
        )
        return AWAITING_TARGET_WEIGHT
    
    if save_weight_goal(username, weight):
        await update.message.reply_text(
            f"–¶–µ–ª–µ–≤–æ–π –≤–µ—Å {weight} –∫–≥ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n"
            "–¢–µ–ø–µ—Ä—å —è –±—É–¥—É —É—á–∏—Ç—ã–≤–∞—Ç—å –µ–≥–æ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."
        )
    else:
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ü–µ–ª–µ–≤–æ–≥–æ –≤–µ—Å–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    return ConversationHandler.END

async def ask_weekly_weight(application: Application):
    """Ask users for weight measurement every Sunday morning"""
    while True:
        try:
            # Wait until next Sunday 9:00
            now = datetime.now(pytz.timezone(DEFAULT_TIMEZONE))
            days_until_sunday = (6 - now.weekday()) % 7
            if days_until_sunday == 0 and now.hour >= 9:
                days_until_sunday = 7
            next_sunday = now.replace(hour=9, minute=0, second=0, microsecond=0) + timedelta(days=days_until_sunday)
            wait_seconds = (next_sunday - now).total_seconds()
            await asyncio.sleep(wait_seconds)
            
            # Get all active users
            users = get_all_active_users()
            
            for username in users:
                try:
                    keyboard = [
                        ["–í–Ω–µ—Å—Ç–∏ –≤–µ—Å —Å–µ–π—á–∞—Å"],
                        ["–ù–∞–ø–æ–º–Ω–∏—Ç—å –∑–∞–≤—Ç—Ä–∞"]
                    ]
                    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
                    
                    await application.bot.send_message(
                        chat_id=username,
                        text="–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ü–æ—Ä–∞ –∑–∞–ø–∏—Å–∞—Ç—å –≤–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å.",
                        reply_markup=reply_markup
                    )
                except Exception as e:
                    logging.error(f"Error asking weight from user {username}: {str(e)}")
            
        except Exception as e:
            logging.error(f"Error in weekly weight task: {str(e)}")
            await asyncio.sleep(60)  # Wait a minute before retrying

async def handle_weight_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handler for weight request buttons"""
    text = update.message.text
    
    if text == "–í–Ω–µ—Å—Ç–∏ –≤–µ—Å —Å–µ–π—á–∞—Å":
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70.5)",
            reply_markup=ReplyKeyboardRemove()
        )
        return AWAITING_WEIGHT
    elif text == "–ù–∞–ø–æ–º–Ω–∏—Ç—å –∑–∞–≤—Ç—Ä–∞":
        # Schedule reminder for tomorrow at 9:00
        now = datetime.now(pytz.timezone(DEFAULT_TIMEZONE))
        tomorrow = now.replace(hour=9, minute=0, second=0, microsecond=0) + timedelta(days=1)
        delay = (tomorrow - now).total_seconds()
        
        context.job_queue.run_once(
            remind_weight,
            delay,
            data=update.effective_user.username
        )
        await update.message.reply_text(
            "–•–æ—Ä–æ—à–æ, —è –Ω–∞–ø–æ–º–Ω—é –≤–∞–º –∑–∞–≤—Ç—Ä–∞ –≤ 9:00.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END

async def remind_weight(context: ContextTypes.DEFAULT_TYPE):
    """Callback for weight reminder"""
    username = context.job.data
    keyboard = [
        ["–í–Ω–µ—Å—Ç–∏ –≤–µ—Å —Å–µ–π—á–∞—Å"],
        ["–ù–∞–ø–æ–º–Ω–∏—Ç—å –∑–∞–≤—Ç—Ä–∞"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    
    await context.bot.send_message(
        chat_id=username,
        text="–ù–∞–ø–æ–º–∏–Ω–∞—é –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∞—Ç—å –≤–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å.",
        reply_markup=reply_markup
    )

def main():
    """Main bot launch function"""
    # Create application
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # Create conversation handler for messages and photos
    message_conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.PHOTO | filters.TEXT | filters.VOICE & ~filters.COMMAND, process_message)
        ],
        states={
            AWAITING_FEEDBACK: [CallbackQueryHandler(button_callback)],
            AWAITING_CONTEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_additional_context)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    # Create conversation handler for goals
    goals_conv_handler = ConversationHandler(
        entry_points=[CommandHandler('setgoals', set_goals_command)],
        states={
            AWAITING_GOALS: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_goals)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    # Create conversation handler for weight
    weight_conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('weight', weight_command),
            MessageHandler(filters.Regex('^(–í–Ω–µ—Å—Ç–∏ –≤–µ—Å —Å–µ–π—á–∞—Å|–ù–∞–ø–æ–º–Ω–∏—Ç—å –∑–∞–≤—Ç—Ä–∞)$'), handle_weight_button)
        ],
        states={
            AWAITING_WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_weight)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    # Create conversation handler for target weight
    target_weight_conv_handler = ConversationHandler(
        entry_points=[CommandHandler('targetweight', target_weight_command)],
        states={
            AWAITING_TARGET_WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_target_weight)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    # Add handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("goals", goals_command))
    application.add_handler(CommandHandler("calories", calories_command))
    application.add_handler(CommandHandler("analyze", analyze_command))
    application.add_handler(message_conv_handler)
    application.add_handler(goals_conv_handler)
    application.add_handler(weight_conv_handler)
    application.add_handler(target_weight_conv_handler)

    # Start daily summary task
    application.job_queue.run_custom(send_daily_summary, job_kwargs={"max_instances": 1})

    # Start weekly weight task
    application.job_queue.run_custom(ask_weekly_weight, job_kwargs={"max_instances": 1})

    # Launch bot
    application.run_polling()

if __name__ == '__main__':
    main() 